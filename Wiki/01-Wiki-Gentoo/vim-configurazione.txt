"~/.vimrc

" scrive le modifiche prima di cambiare buffer
set autowrite

" imposta un'unica cartella per i file *~, evitando
" così di lasciarli dispersi per il filesystem
set backupdir=~/.tmp

" palette di colori scuri in terminale
set bg=dark

" usa gli spazi al posto del carattere di tabulazione
set expandtab

" disabilita il blinking del cursore in modalità normale
set gcr=n:blinkon0

" salva le ultime 100 righe di storia dei comandi
set history=100

" evidenzia i termini trovati dalla ricerca
set hlsearch

" forza la ricerca case-insensitive
set ignorecase

" forza la ricerca incrementale, cioè salta al primo termine
" trovato anche durante la digitazione
set incsearch

" mostra sempre la status bar
set laststatus=2

" disabilitando la modalità retro-compatibilità, si attivano
" tutte le features di Vim (in opposizione a Vi)
set nocompatible

" disabilita il wrap delle linee, le linee troppo lunghe
" non verranno mandate a capo creando confusione.
set nowrap

" mostra sempre i numeri di riga
set number

" mostra le coordinate, per riga e colonna, della posizione
" corrente del cursore
set ruler

" se è abilitata l’auto-indentazione, questa viene sostituita
" con 4 spazi
set shiftwidth=4

" mostra sempre l’output dei comandi nella barra di stato.
" Ad es. mostra il numero di righe selezionate
set showcmd

" evidenzia le parentesi corrispondenti
set showmatch

" sostituisce il carattere di tabulazione con 4 spazi
set tabstop=4

" disabilita il wrap delle parole
set textwidth=0

" setta un numero di possibili undo abbastanza alto
set undolevels=1000

" carattere da utilizzare per iniziare ad espandere le macro.
" Ad es. ho impostato che scrivendo "pdb” e premendo TAB
" il testo viene sostituito con "import pdb;pdb.set_trace()”
set wildchar=<Tab>

" questa impostazione è una delle più comode, infatti quando digito un
" comando incompleto e premo TAB, mostra un comodo menu al
" posto di ciclare su tutte le opzioni
set wildmenu

" imposta un set di colori predefinito
colorscheme noktomix

" abilita sempre la colorazione del testo in funzione della sintassi riconosciuta
syntax on

" abilita sempre la modalità paste, utile per evitare che
" al copia-incolla vengano inseriti tab non richiesti
set paste

" disabilita l’autoindentazione, fa più danno che altro
set noautoindent

" se il sistema dispone di un mouse lo utilizza
if has('mouse')
 set mouse=a
endif

" cambia colore in modalità inserimento
if &term =~ "xterm"
 let &t_SI = "\<Esc>]12;orange\x7"
 let &t_EI = "\<Esc>]12;white\x7"
endif

" permette di nascondere velocemente la colonna della numerazione
" per facilitare il copia/incolla del testo
nnoremap K :set nonumber!<CR>:set foldcolumn=0<CR>

" mostra un po' di utili informazioni nella status bar, es. nome e path del
" file aperto, se ci sono modifiche non salvate, riga e colonna del cursore,
" percentuale di avanzamento nella lettura del testo.
set statusline=%F%m%r%h%w\ %y\ [row=%l/%L]\ [col=%02v]\ [%02p%%]\

“ ecco un comando veramente furbo. Capita sempre di aprire un file, cominciare
" a modificarlo, per poi scoprire che il file è aperto in sola lettura per
" questione di permessi di accesso. Bene: con questo comando, si forza vim
" a chiudere e riaprire il file con i permessi di sudo (richiedendo la password)
" e salvando il buffer.
cmap w!! %!sudo tee > /dev/null %

" shortcut molto comoda per trascinare una riga in alto o in basso,
" eventualmente scambiando di posizione con la riga di destinazione,
"semplicemente tenendo premuto CTRL e spostando la riga con le frecce
" in alto e in basso.
nmap <C-Up> ddkP
nmap <C-Down> ddp

" questo gruppo di shortcut semplifica lo spostamento del focus
" da una finestra all’altra, basta tenere premuto ALT e spostarsi con
" le frecce di direzione.
nmap <silent> <A-Up> :wincmd k<CR>
nmap <silent> <A-Down> :wincmd j<CR>
nmap <silent> <A-Left> :wincmd h<CR>
nmap <silent> <A-Right> :wincmd l<CR>

“ premendo la combinazione di tasti “\ + l” si visualizzano/nascondono
" i caratteri nascosti, come ad esempio gli spazi a fine riga,
" e i caratteri di tabulazione
nmap <leader>l :set list!<CR>

" Vundle plugin-manager per Vim. Si occupa di scaricare, aggiornare e
" disinstallare i plugin, in maniera automatica.
" git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
" Ora dobbiamo aggiungere in fondo al nostro file .vimrc la seguente configurazione:

set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'

filetype plugin indent on
" Una volta chiuso e riaperto vim usare il comando:

" :BundleList
" e avremo la lista dei bundle abilitati. Per aggiungere un nuovo plugin/bundle basta inserire una nuova riga " " nel nostro file .vimrc, ad esempio:

" Bundle 'tpope/vim-fugitive'
" Bundle 'Lokaltog/vim-easymotion'
" Per scaricare e abilitare i plugin appena aggiunti, usa il comando:
" :BundleInstall
" che aprirà una nuova finestra verticale dove si può vedere l’avanzamento.
" Per aggiungere nuovi bundles a Vundle basta lanciare il comando:
" :Bundles
" che ci mostra tutti i plugin conosciuti al momento da Vundle. Premendo SHIFT-R si forza l’aggiornamento della " lista.
" In alternativa, possiamoa dare un’occhiata nel gruppo di repository su github:
" https://github.com/vim-scripts
" Qui trova quasi tutti i bundle vim disponibili. Nel readme di ogni plugin viene dichiarata l’eventuale " compatibilità con Vundle .
" In generale possa testare il funzionamento del bundle semplicemente
" utilizzando come nome del bundle la parte finale del url di github. Ad es.:
" https://github.com/Lokaltog/powerline
" diventa:
" Bundle 'Lokaltog/powerline'
" Per mantenere aggiornati i nostri bundle possa usare il comando:
" :BundleUpdate
" Questo comando lancia un comando “git pull” su tutti i bundles. Una volta completato il processo possa premere “" u” per vedere il changelog dei prodotti aggiornati.
" Per rimuovere un bundle  prima rimuovere o commentare la riga corrispondente nel file .vimrc e poi lanciare:
" :BundleClean
" Conclusioni
" In conclusione, ecco una lista dei plugin che ho trovato utili per la mia attività di pythonista/plonista:
Bundle 'gmarik/vundle'
Bundle 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
Bundle 'scrooloose/nerdtree'
Bundle 'klen/python-mode'
Bundle 'airblade/vim-gitgutter'
Bundle 'gmarik/sudo-gui.vim'
Bundle "MarcWeber/vim-addon-mw-utils"
Bundle "tomtom/tlib_vim"
Bundle "garbas/vim-snipmate"
Bundle "zedr/zope-snipmate-bundle"

" Fine .

